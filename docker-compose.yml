version: "3.8"
services:
  dynamodb-local:
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ".data/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
  postgres:
    image: "postgres:14"
    container_name: postgres
    restart: "always"
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"
    volumes:
      - ".data/postgres:/var/lib/postgresql/data"
  mongo:
    image: "mongo"
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD}"
    volumes:
      - ".data/mongo:/data/db"
  mongo-express:
    image: "mongo-express"
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - "mongo"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${MONGO_USERNAME}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${MONGO_PASSWORD}"
      ME_CONFIG_MONGODB_URL: "mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/"
  redis:
    image: "redis"
    container_name: redis
    restart: "always"
    ports:
      - "6379:6379"
    volumes:
      - ".data/redis:/data"
  minio:
    image: "minio/minio"
    container_name: minio
    restart: "always"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ".data/minio:/data"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    command: server --console-address ":9001" /data
  vault:
    image: "vault:1.13.3"
    container_name: vault
    restart: always
    ports:
      - "8200:8200"
    volumes:
      - "./vault-config:/vault/config"
      - ".data/vault:/vault/files"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
      VAULT_API_ADDR: "https://127.0.0.1:8201"
      VAULT_DEV_ROOT_TOKEN_ID: "${VAULT_ROOT_TOKEN_ID}"
    cap_add:
      - IPC_LOCK
    command: ["server"]
  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    restart: always
    volumes:
      - .data/opensearch-data1:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600
  opensearch-node2:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    restart: always
    volumes:
      - .data/opensearch-data2:/usr/share/opensearch/data
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    restart: always
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]'
